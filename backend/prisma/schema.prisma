generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  studentProfile StudentProfile?
  internships    Internship[]
  applications   Application[]
  feedbacks      Feedback[]

  @@map("users")
}
model StudentProfile {
  id        Int     @id @default(autoincrement()) // matches number in TS
  userId    String  @unique
  name      String
  email     String  @unique
  phone     String
  class     String
  major     String
  year      String
  gpa       String
  skills    String
  bio       String
  resumeUrl String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model Internship {
  id          String   @id @default(cuid())
  industryId  String
  roleName    String
  duration    String
  stipend     Float
  description String
  location    Location
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  industry     User          @relation(fields: [industryId], references: [id], onDelete: Cascade)
  applications Application[]
  feedbacks    Feedback[]

  @@map("internships")
}

model Application {
  id           String            @id @default(cuid())
  studentId    String
  internshipId String
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)

  @@unique([studentId, internshipId])
  @@map("applications")
}

model Feedback {
  id           String @id @default(cuid())
  industryId   String
  studentId    String
  internshipId String
  feedbackText String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt


  industry   User       @relation(fields: [industryId], references: [id], onDelete: Cascade)
  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

enum Role {
  STUDENT
  INDUSTRY
  FACULTY
}

enum Location {
  ONLINE
  OFFLINE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}