generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String
  role     Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentProfile StudentProfile?
  internships    Internship[]
  applications   Application[]
  feedbackGiven  Feedback[] @relation("IndustryFeedback")
  feedbackReceived Feedback[] @relation("StudentFeedback")
  facultyFeedback Feedback[] @relation("FacultyFeedback")

  @@map("users")
}

model StudentProfile {
  id          String @id @default(uuid())
  userId      String @unique
  dob         DateTime?
  age         Int?
  collegeYear String?
  hobbies     String?
  resumePath  String?
  cvPath      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model Internship {
  id          String   @id @default(uuid())
  industryId  String
  roleName    String
  duration    String
  stipend     Float
  description String
  location    Location
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  industry     User          @relation(fields: [industryId], references: [id], onDelete: Cascade)
  applications Application[]
  feedback     Feedback[]

  @@map("internships")
}

model Application {
  id           String            @id @default(uuid())
  studentId    String
  internshipId String
  status       ApplicationStatus @default(PENDING)
  reportPath   String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  feedback   Feedback[]

  @@unique([studentId, internshipId])
  @@map("applications")
}

model Feedback {
  id           String  @id @default(uuid())
  facultyId    String?
  industryId   String
  studentId    String
  internshipId String
  applicationId String?
  feedbackText String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  faculty      User?        @relation("FacultyFeedback", fields: [facultyId], references: [id])
  industry     User         @relation("IndustryFeedback", fields: [industryId], references: [id], onDelete: Cascade)
  student      User         @relation("StudentFeedback", fields: [studentId], references: [id], onDelete: Cascade)
  internship   Internship   @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  application  Application? @relation(fields: [applicationId], references: [id])

  @@map("feedback")
}

enum Role {
  STUDENT
  INDUSTRY
  FACULTY
}

enum Location {
  ONLINE
  OFFLINE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}